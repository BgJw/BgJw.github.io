{"version":3,"file":"static/js/830.3ac1a920.chunk.js","mappings":"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","sources":["components/Breadcrumbs/Breadcrumbs.tsx","components/MyButtons/MyButtons.tsx","Hooks/useBadge.ts","Helpers/checkPrice.ts","pages/CartPage/Counter/Counter.tsx","pages/CartPage/Dropdown/Dropdown.tsx","pages/CartPage/Content.tsx","pages/CartPage/PriceSection/PriceSection.tsx","pages/CartPage/CartPage.tsx"],"sourcesContent":["import { Link, useLocation, useNavigate } from 'react-router-dom';\nimport './Breadcrumbs.scss';\n\n\nconst Breadcrumbs = () => {\n    const {pathname} = useLocation();\n    const navigate = useNavigate();\n    \n    return (\n        <div className='bread'>\n            <Link to={'/'}>Home</Link>\n            /\n            <button onClick={() => navigate(-1)}>\n                Back\n            </button>\n            {\n            pathname !== '/filter' &&\n            <>\n                /\n                <Link to={'/filter'}>\n                    Filter\n                </Link>\n            </>\n            }\n        </div>\n    );\n};\n\nexport default Breadcrumbs;","import { memo, useEffect } from 'react';\nimport { useBadge } from '../../Hooks/useBadge';\nimport { useAppDispatch, useAppSelector } from '../../Hooks/useDispatch_Selector';\nimport { incrementBadge, decrementBadge, addDataBadge, removeDataBadge } from '../../Slices/BadgeSlice';\nimport { BadgeType, IClothesService } from '../../types/Types';\n\ninterface IProps{\n    on?: string,\n    off?: string,\n    type: BadgeType,\n    product: IClothesService,\n    sizeForCart?: string[]\n}\n\nconst MyButtons = memo( ({ on, off, type, product, sizeForCart }: IProps) => {\n    \n    const style = () => { \n        if(type === BadgeType.favorite){\n            return !badge ? 'bttn__link bttnFavoritesOn' : 'bttn__link bttnFavoritesOff';\n        }\n        if(type === BadgeType.compare){\n            return !badge ? 'bttn__link bttnCompareOff' : 'bttn__link bttnCompareOn'\n        }\n        if(type === BadgeType.cart){\n            return !badge ? 'bttnCartOn' : 'bttnCartOff';\n        }\n    }\n    const {badge, isCheckId, changeBadge} = useBadge();\n    const data = useAppSelector(state => state.BadgeSlice[type].data);\n    const dispatch = useAppDispatch();    \n    \n\n    useEffect(()=> { isCheckId(data, product) } , [product])\n    \n\n\n    return (\n        !badge?\n            <button \n                className={ style() }\n                aria-label={type}\n                onClick={ () => {\n                    dispatch(incrementBadge(type))\n                    dispatch(addDataBadge({name: type, data: {...product, size: sizeForCart} as IClothesService}))\n                    changeBadge()\n                }}\n            >\n            {on}\n            </button>\n        :\n            <button \n                className={ style() }\n                onClick={ () => {\n                    dispatch(decrementBadge(type))\n                    dispatch(removeDataBadge({name: type, data: product}))\n                    changeBadge()\n                }}\n            >\n                {off}\n            </button>\n    );\n});\n\nexport default MyButtons;","import {useCallback, useState} from 'react';\nimport { IClothesService } from '../types/Types';\n\nexport const useBadge = ( ) => {\n\n    const [badge, setbadge] = useState<boolean>(false);\n\n    const changeBadge = useCallback(() => setbadge( badge => !badge), []);\n\n    const isCheckId = (data: IClothesService[], product: IClothesService) => { \n          \n            data.find(el => el.id === product.id && changeBadge())\n    };\n\n\n    return {\n        badge,\n        changeBadge,\n        isCheckId\n    }\n};","export const checkPrice = (price: number): string | number => {\n\n    let temp: number | string = Math.trunc(price);\n    \n    if( price < 1000) temp = Math.trunc(price);\n\n    if (price >= 1000) temp = Math.trunc(price).toString().slice(0,1) + ' '+  Math.trunc(price).toString().slice(1);\n    \n    if (price >= 10000) temp = Math.trunc(price).toString().slice(0,2) + ' '+  Math.trunc(price).toString().slice(2);\n    \n    return temp;\n}","import React, { useEffect, useState } from 'react';\nimport { ITotal } from '../Content';\nimport './Counter.scss';\n\ninterface IProps{\n    disabled: boolean,\n    activeSize: string,\n    setTotalInfo: React.Dispatch<React.SetStateAction<ITotal>> ,\n    totalInfo: ITotal\n}\n\nconst Counter = ({disabled, activeSize, setTotalInfo, totalInfo }:IProps) => {\n\n    const index = activeSize as keyof ITotal;\n        \n    const [count, setCount] = useState( totalInfo[index] );\n\n    \n    useEffect( () => {\n        setTotalInfo( {...totalInfo, [index]: count })\n    }, [count]);\n\n\n    useEffect( () => {\n        setCount(totalInfo[index]);\n    }, [activeSize]);\n    \n    const checkValue = (e: {target: HTMLInputElement}) => {\n\n        if( Number(e.target.value) <= 0 ) setCount(1);\n        \n        else if(Number(e.target.value) <= 30) setCount( Number(e.target.value)); \n        \n        else setCount(30);\n    }\n    \n    return (\n        <div className=\"counter\">\n            <button\n                disabled={disabled || count <= 1}\n                className=\"left\"\n                onClick={() => setCount(prev => prev > 1 ? prev-1 : prev = 1)}\n            >-</button>\n            <input\n                disabled={disabled} \n                type=\"number\" \n                value={ disabled ? 1 : Number(count).toString()}\n                onChange={e => checkValue(e)}\n            />\n            <button\n                disabled={disabled || count >= 30} \n                className=\"right\"\n                onClick={() => setCount(prev => prev < 30 ? prev+1 : prev = 30)}\n            >+</button>\n        </div>\n    );\n};\n\nexport default Counter;","import { useState } from 'react';\nimport './Dropdown.scss';\n\n\ninterface IProps {\n    size: string[] | undefined,\n    setDisabledCounter: React.Dispatch<React.SetStateAction<boolean>>,\n    setActiveSize: React.Dispatch<React.SetStateAction<string>>,\n    activeSize: string\n}\n\nconst Dropdown = ({size, setDisabledCounter, setActiveSize, activeSize}: IProps) => {\n    const [show, setShow] = useState(false);\n\n    return (\n        <div className=\"dropdown\">\n            <button\n                className={show ?\n                    \"dropdown-bttn active\" :\n                    \"dropdown-bttn\"}\n                onClick={() => setShow(!show)}\n            >\n                {activeSize ? activeSize: 'Size'}\n                {show ?\n                    <> &#8679;</>\n                    :\n                    <> &#8681;</>\n                }\n            </button>\n            {\n                show &&\n                <div className=\"dropdown-content\">\n                    {\n                        size?.map(size => (\n                            <button\n                                key={size} \n                                className=\"dropdown-content-bttn\"\n                                onClick={ () => {\n                                    setDisabledCounter(false);\n                                    setActiveSize(size);\n                                    setShow(!show)\n                                }}\n                            >\n                                {size}\n                            </button>\n                        ))\n                    }\n                </div>\n            }\n\n\n        </div>\n    );\n};\n\nexport default Dropdown;","import { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport MyButtons from '../../components/MyButtons/MyButtons';\nimport { checkPrice } from '../../Helpers/checkPrice';\nimport { BadgeType, ICarts } from '../../types/Types';\nimport Counter from './Counter/Counter';\nimport Dropdown from './Dropdown/Dropdown';\n\ninterface IProps {\n    product: ICarts,\n    totalPrice: { [x: string]: number },\n    setPrice: React.Dispatch<React.SetStateAction<{ [x: string]: number;}>>\n}\nexport interface ITotal {\n    S: number,\n    M: number,\n    L: number,\n    XL: number,\n    XXL: number\n}\n\nconst Content = ({ product,setPrice, totalPrice }: IProps) => {\n    const { alt_description, id, urls, price, size } = product;\n    const [disabledCounter, setDisabledCounter] = useState(true);\n    const [totalInfo, setTotalInfo] = useState<ITotal>({ S: 0, M: 0, L: 0, XL: 0, XXL: 0 });\n    const [activeSize, setActiveSize] = useState('');\n\n    const setSize = () => {\n        const obj = {} as ITotal;\n        size?.map(size => obj[size as keyof ITotal] = 1);\n        setTotalInfo(obj);\n    };\n    const removeEL = (e: React.MouseEvent<HTMLDivElement, MouseEvent>, id: string) => {\n        const target = e.target as Element;\n        \n        if (target.classList.contains('bttnCartOff') ) {\n            setPrice( prev => ({...prev, [id]: contentPrice -totalPrice[id] }))\n        }\n\n        \n    }\n    const contentPrice = Object.values(totalInfo).reduce( (a,b) => a+b) * (price as number);\n\n    useEffect(() => { setSize() }, []);\n    useEffect( () => { setPrice( prev => ({...prev, [id]: contentPrice})) }, [totalInfo]);   \n\n    return (\n        <div\n            className=\"cart__product\"\n        >\n            <Link to={`/product/${id}`}>\n                <img className=\"img\" src={urls.regular} alt={alt_description} />\n            </Link>\n            <div className=\"information\">\n                <p>{alt_description}</p>\n                <p>{price} $/oс</p>\n            </div>\n            <div className='selectSize'>\n                <Dropdown\n                    size={size}\n                    setActiveSize={setActiveSize}\n                    activeSize={activeSize}\n                    setDisabledCounter={setDisabledCounter}\n                />\n                <Counter\n                    disabled={disabledCounter}\n                    activeSize={activeSize}\n                    setTotalInfo={setTotalInfo}\n                    totalInfo={totalInfo}\n                />\n            </div>\n            <div className='totalPrice'>\n                <span>{ checkPrice(contentPrice)} $</span>\n            </div>\n            <div className='additionalOptions'\n                onClick={ (e) => removeEL(e, id)}>\n                <>\n                    <MyButtons\n                        type={BadgeType.favorite}\n                        product={product}\n                    />\n                    <MyButtons\n                        type={BadgeType.cart}\n                        product={product}\n                    />\n                </>\n            </div>\n        </div>\n    );\n};\n\nexport default Content;","import { useState } from 'react';\nimport { checkPrice } from \"../../../Helpers/checkPrice\";\n\nimport './PriceSection.scss';\n\ninterface IProps {\n    totalPrice: { [x: string]: number; }\n}\n\n\nconst PriceSection = ({ totalPrice }: IProps) => {\n    const [inputGift, setInputGift] = useState('');\n\n    \n    const GIFT = 'gift';\n    \n    const summary = Object.values(totalPrice).reduce((a, b) => a + b, 0);\n    const isDiscount = inputGift === GIFT;\n    const discount = isDiscount ? summary * 0.9 : summary;\n    \n        \n    return (\n        <div className=\"priceWrap\">\n            <div className=\"priceWrap__section\">\n                <h4>Summary</h4>\n            </div>\n            <div className=\"priceWrap__gift\">\n                Gift code:\n                <input\n                    placeholder=\"gift\"\n                    type=\"text\"\n                    value={inputGift}\n                    onChange={ e => setInputGift(e.target.value)}\n                />\n            </div>\n            <div className=\"priceWrap__grid\">\n                Discount:\n                <p className=\"discount\">{isDiscount ? '10%' : '0%'}</p>\n                Total:\n                <p>\n                    <span className={isDiscount ? 'line smallSize' : 'bigSize'}>\n                        {checkPrice(summary)} $\n                    </span>\n                    {isDiscount && \n                        <span className='bigSize'>\n                            {checkPrice(discount)} $\n                        </span>}\n                </p>\n            </div>\n            <button className=\"priceWrap__bttn\">\n                Buy now\n            </button>\n        </div>\n    );\n};\n\nexport default PriceSection;","import { useAppSelector } from \"../../Hooks/useDispatch_Selector\";\nimport { Helmet } from \"react-helmet\";\nimport Breadcrumbs from \"../../components/Breadcrumbs/Breadcrumbs\";\nimport Content from \"./Content\";\nimport { useState } from \"react\";\nimport PriceSection from \"./PriceSection/PriceSection\";\nimport './CartPage.scss';\n\n\n\nconst CartPage = () => {\n    const data = useAppSelector(state => state.BadgeSlice.cart.data);\n    const [totalPrice, setTotalPrice] = useState<{ [x: string]: number }>({});\n    console.log('render price Section');\n    \n    return (\n        <>\n            <Helmet>\n                <title>Cart products</title>\n            </Helmet>\n\n            <Breadcrumbs />\n\n            <h2 className=\"pageName\">Cart</h2>\n\n            {data.length ?\n\n                <div className=\"carts\">\n\n                    <div className=\"cart\">\n                        {\n                            data.map(product => (\n                                <Content key={product.id} product={product} totalPrice={totalPrice} setPrice={setTotalPrice} />\n                            ))\n                        }\n                    </div>\n                    {/* Total Price  */}\n                    <PriceSection totalPrice={totalPrice} />\n                </div>\n                :\n                // if cart is empty\n                <h3 className=\"pageEmpty\">Cart list is empty</h3>\n            }\n        </>\n    );\n};\n\nexport default CartPage;"],"names":["pathname","useLocation","navigate","useNavigate","className","to","onClick","memo","on","off","type","product","sizeForCart","style","BadgeType","badge","useState","setbadge","changeBadge","useCallback","isCheckId","data","find","el","id","useBadge","useAppSelector","state","BadgeSlice","dispatch","useAppDispatch","useEffect","decrementBadge","removeDataBadge","name","incrementBadge","addDataBadge","size","checkPrice","price","temp","Math","trunc","toString","slice","disabled","activeSize","setTotalInfo","totalInfo","index","count","setCount","prev","value","Number","onChange","e","target","checkValue","setDisabledCounter","setActiveSize","show","setShow","map","setPrice","totalPrice","alt_description","urls","disabledCounter","S","M","L","XL","XXL","contentPrice","Object","values","reduce","a","b","obj","setSize","src","regular","alt","classList","contains","removeEL","MyButtons","inputGift","setInputGift","summary","isDiscount","discount","placeholder","cart","setTotalPrice","console","log","Helmet","Breadcrumbs","length"],"sourceRoot":""}