{"version":3,"file":"static/js/197.faedde40.chunk.js","mappings":"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","sources":["components/Breadcrumbs/Breadcrumbs.tsx","components/MyButtons/MyButtons.tsx","Hooks/useBadge.ts","components/Spinner/Spinner.tsx","pages/SingleProductPage/BttnSizeAndBuy/BttnSizeAndBuy.tsx","pages/SingleProductPage/Component.tsx","pages/SingleProductPage/SingleProduct.tsx"],"sourcesContent":["import { Link, useLocation, useNavigate } from 'react-router-dom';\nimport './Breadcrumbs.scss';\n\n\nconst Breadcrumbs = () => {\n    const {pathname} = useLocation();\n    const navigate = useNavigate();\n    \n    return (\n        <div className='bread'>\n            <Link to={'/'}>Home</Link>\n            /\n            <button onClick={() => navigate(-1)}>\n                Back\n            </button>\n            {\n            pathname !== '/filter' &&\n            <>\n                /\n                <Link to={'/filter'}>\n                    Filter\n                </Link>\n            </>\n            }\n        </div>\n    );\n};\n\nexport default Breadcrumbs;","import { memo, useEffect } from 'react';\nimport { useBadge } from '../../Hooks/useBadge';\nimport { useAppDispatch, useAppSelector } from '../../Hooks/useDispatch_Selector';\nimport { incrementBadge, decrementBadge, addDataBadge, removeDataBadge } from '../../Slices/BadgeSlice';\nimport { BadgeType, IClothesService } from '../../types/Types';\n\ninterface IProps{\n    on?: string,\n    off?: string,\n    type: BadgeType,\n    product: IClothesService,\n    sizeForCart?: string[]\n}\n\nconst MyButtons = memo( ({ on, off, type, product, sizeForCart }: IProps) => {\n    \n    const style = () => { \n        if(type === BadgeType.favorite){\n            return !badge ? 'bttn__link bttnFavoritesOn' : 'bttn__link bttnFavoritesOff';\n        }\n        if(type === BadgeType.compare){\n            return !badge ? 'bttn__link bttnCompareOff' : 'bttn__link bttnCompareOn'\n        }\n        if(type === BadgeType.cart){\n            return !badge ? 'bttnCartOn' : 'bttnCartOff';\n        }\n    }\n    const {badge, isCheckId, changeBadge} = useBadge();\n    const data = useAppSelector(state => state.BadgeSlice[type].data);\n    const dispatch = useAppDispatch();    \n    \n\n    useEffect(()=> { isCheckId(data, product) } , [product])\n    \n\n\n    return (\n        !badge?\n            <button \n                className={ style() }\n                aria-label={type}\n                onClick={ () => {\n                    dispatch(incrementBadge(type))\n                    dispatch(addDataBadge({name: type, data: {...product, size: sizeForCart} as IClothesService}))\n                    changeBadge()\n                }}\n            >\n            {on}\n            </button>\n        :\n            <button \n                className={ style() }\n                onClick={ () => {\n                    dispatch(decrementBadge(type))\n                    dispatch(removeDataBadge({name: type, data: product}))\n                    changeBadge()\n                }}\n            >\n                {off}\n            </button>\n    );\n});\n\nexport default MyButtons;","import {useCallback, useState} from 'react';\nimport { IClothesService } from '../types/Types';\n\nexport const useBadge = ( ) => {\n\n    const [badge, setbadge] = useState<boolean>(false);\n\n    const changeBadge = useCallback(() => setbadge( badge => !badge), []);\n\n    const isCheckId = (data: IClothesService[], product: IClothesService) => { \n          \n            data.find(el => el.id === product.id && changeBadge())\n    };\n\n\n    return {\n        badge,\n        changeBadge,\n        isCheckId\n    }\n};","\nfunction Spinner() {\n    return (\n           <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            style={{margin: '0 auto', background: 'none', display: 'block'}}\n            width=\"200\"\n            height=\"200\"\n            preserveAspectRatio=\"xMidYMid\"\n            viewBox=\"0 0 100 100\"\n        >\n            <circle\n                cx=\"50\"\n                cy=\"50\"\n                r=\"0\"\n                fill=\"none\"\n                stroke=\"#1d0e0b\"\n                strokeWidth=\"2\"\n            >\n                <animate\n                    attributeName=\"r\"\n                    begin=\"0s\"\n                    calcMode=\"spline\"\n                    dur=\"1.1363636363636365s\"\n                    keySplines=\"0 0.2 0.8 1\"\n                    keyTimes=\"0;1\"\n                    repeatCount=\"indefinite\"\n                    values=\"0;40\"\n                ></animate>\n                <animate\n                    attributeName=\"opacity\"\n                    begin=\"0s\"\n                    calcMode=\"spline\"\n                    dur=\"1.1363636363636365s\"\n                    keySplines=\"0.2 0 0.8 1\"\n                    keyTimes=\"0;1\"\n                    repeatCount=\"indefinite\"\n                    values=\"1;0\"\n                ></animate>\n            </circle>\n            <circle\n                cx=\"50\"\n                cy=\"50\"\n                r=\"0\"\n                fill=\"none\"\n                stroke=\"#774023\"\n                strokeWidth=\"2\"\n            >\n                <animate\n                    attributeName=\"r\"\n                    begin=\"-0.5681818181818182s\"\n                    calcMode=\"spline\"\n                    dur=\"1.1363636363636365s\"\n                    keySplines=\"0 0.2 0.8 1\"\n                    keyTimes=\"0;1\"\n                    repeatCount=\"indefinite\"\n                    values=\"0;40\"\n                ></animate>\n                <animate\n                    attributeName=\"opacity\"\n                    begin=\"-0.5681818181818182s\"\n                    calcMode=\"spline\"\n                    dur=\"1.1363636363636365s\"\n                    keySplines=\"0.2 0 0.8 1\"\n                    keyTimes=\"0;1\"\n                    repeatCount=\"indefinite\"\n                    values=\"1;0\"\n                ></animate>\n            </circle>\n        </svg>\n            );\n}\n\nexport default Spinner;\n","import { memo, useCallback, useState } from 'react';\nimport { useAppSelector } from '../../../Hooks/useDispatch_Selector';\nimport { sizes } from '../../../services/ClothesService';\nimport './Sizes.scss';\nimport MyButtons from '../../../components/MyButtons/MyButtons';\nimport { BadgeType, IClothesService } from '../../../types/Types';\n\ninterface IProps {\n    product: IClothesService\n}\nconst BttnSizeAndBuy = memo(({ product }: IProps) => {\n    const [size, setSize] = useState<string[]>(['S']);\n    \n    const data = useAppSelector(state => state.BadgeSlice.cart.data);\n\n    const isCheckSize = useCallback((size: string) => {\n            setSize(prev => {\n                if (!prev.includes(size)) {\n                    return [...prev, size]\n                } else {\n                    return prev.length > 1 ? prev.filter(el => el !== size) : prev\n                }\n            })\n    }, [setSize]);\n\n\n    const find = data.find(e => e.id === product.id);\n\n    return (\n        <>\n        \n        <div className=\"sizes\">\n            {\n                sizes.map(el => (\n                    <button\n                        disabled={ Boolean(find) }\n                        className={ size.includes(el) ? 'active' : ''}\n                        onClick={() => isCheckSize(el)}\n                        key={el}\n                    >\n                        {el}\n                    </button>\n                ))\n            }\n        </div>\n        <div className='wrap__information__buy'>\n                        <MyButtons\n                            on=\"BUY IT\"\n                            off='REMOVE IT'\n                            type={BadgeType.cart}\n                            product={product}\n                            sizeForCart={size}\n                        />\n                        <MyButtons\n                            type={BadgeType.favorite}\n                            product={product}\n                        />\n                    </div>\n        </>\n    );\n});\n\nexport default BttnSizeAndBuy;","import { BadgeType, IClothesService } from '../../types/Types';\nimport Breadcrumbs from '../../components/Breadcrumbs/Breadcrumbs';\nimport MyButtons from '../../components/MyButtons/MyButtons';\nimport BttnSizeAndBuy from '../../pages/SingleProductPage/BttnSizeAndBuy/BttnSizeAndBuy';\n\ninterface IProps {\n    singleProduct: IClothesService,\n}\n\nconst Component = ({ singleProduct }: IProps) => {\n    \n    \n    return (\n        <>\n            <Breadcrumbs />\n            <div className='wrap'>\n            {/* start photo element */}\n                <div className='wrap__photo'>\n                    <MyButtons\n                        type={BadgeType.compare}\n                        product={singleProduct}\n                    />\n                    <img className='wrap__photo-img' src={singleProduct.urls.regular} alt={singleProduct.alt_description} />\n                </div>\n                {/* End photo element */}\n\n                <div className='wrap__information'>\n                    <div className='wrap__information__preview'>\n                        {/* Price  */}\n                        <p>{singleProduct.alt_description}</p>\n                        <span className='wrap__information__preview-price'>{singleProduct.price} $</span>\n                    </div>\n                    {/* Size */}\n                    <span className='size'>\n                        Sizing\n                    </span> \n                    <BttnSizeAndBuy\n                        product={singleProduct}\n                    />\n\n                        {/* Buy and likes bttn */}\n                    <hr />\n                    {/* Product characteristic */}\n                    <div className='wrap__information__characteristic'>\n                        <h4>Characteristics</h4>\n                        <div className='wrap__information__characteristic__div'>\n                            <div className='wrap__information__characteristic__div-country'>\n                                <small>Country</small>\n                                <p>{singleProduct.country}</p>\n                            </div>\n                            <div className='wrap__information__characteristic__div-material'>\n                                <small>Material</small>\n                                <p>{singleProduct.material}</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            {/* end information */}\n        </>\n    );\n};\n\nexport default Component;","import { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useAppDispatch, useAppSelector } from '../../Hooks/useDispatch_Selector';\nimport { fetchClothesForSingleProduct } from '../../Slices/ProductSlice';\nimport { Status } from '../../types/Types';\nimport Spinner from '../../components/Spinner/Spinner';\nimport Component from './Component';\nimport { Helmet } from \"react-helmet\";\nimport './SingleProduct.scss';\n\nconst SingleProduct = () => {\n    const { productId } = useParams();\n    const { singleProduct, statusSingleProduct } = useAppSelector(state => state.ProductSlice);\n    const dispatch = useAppDispatch();\n    console.log('render single product');\n    \n    useEffect(() => {\n        if (productId !== singleProduct.id) {\n            dispatch(fetchClothesForSingleProduct(String(productId)))\n        }\n    }, []);\n\n    return (\n        <>\n            <Helmet>\n                <title>{singleProduct.alt_description}</title>\n            </Helmet>\n\n            {statusSingleProduct === Status.loading && <Spinner />}\n            {statusSingleProduct === Status.error && <p> Need reload page </p>}\n            {statusSingleProduct === Status.idle &&\n                <Component singleProduct={singleProduct} />\n            }\n        </>\n    )\n};\n\nexport default SingleProduct;"],"names":["pathname","useLocation","navigate","useNavigate","className","to","onClick","memo","on","off","type","product","sizeForCart","style","BadgeType","badge","useState","setbadge","changeBadge","useCallback","isCheckId","data","find","el","id","useBadge","useAppSelector","state","BadgeSlice","dispatch","useAppDispatch","useEffect","decrementBadge","removeDataBadge","name","incrementBadge","addDataBadge","size","xmlns","margin","background","display","width","height","preserveAspectRatio","viewBox","cx","cy","r","fill","stroke","strokeWidth","attributeName","begin","calcMode","dur","keySplines","keyTimes","repeatCount","values","setSize","cart","isCheckSize","prev","includes","length","filter","e","sizes","disabled","Boolean","MyButtons","singleProduct","Breadcrumbs","src","urls","regular","alt","alt_description","price","country","material","productId","useParams","ProductSlice","statusSingleProduct","console","log","fetchClothesForSingleProduct","String","Helmet","Status","Spinner"],"sourceRoot":""}