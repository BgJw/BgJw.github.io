{"version":3,"file":"static/js/482.8d78abbf.chunk.js","mappings":"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","sources":["components/Breadcrumbs/Breadcrumbs.tsx","components/MyButtons/MyButtons.tsx","Hooks/useBadge.ts","Helpers/checkPrice.ts","pages/CartPage/Counter/Counter.tsx","pages/CartPage/Dropdown/Dropdown.tsx","pages/CartPage/Content.tsx","pages/CartPage/PriceSection/PriceSection.tsx","pages/CartPage/CartPage.tsx"],"sourcesContent":["import { Link, useLocation, useNavigate } from 'react-router-dom';\nimport './Breadcrumbs.scss';\n\n\nconst Breadcrumbs = () => {\n    const {pathname} = useLocation();\n    const navigate = useNavigate();\n    console.log('Breadcrumbs rendered');\n    return (\n        <div className='bread'>\n            <Link to={'/'}>Home</Link>\n            /\n            <button onClick={() => navigate(-1)}>\n                Back\n            </button>\n            {\n            pathname !== '/filter' &&\n            <>\n                /\n                <Link to={'/filter'}>\n                    Filter\n                </Link>\n            </>\n            }\n        </div>\n    );\n};\n\nexport default Breadcrumbs;","import { memo } from 'react';\nimport { useBadge } from '../../Hooks/useBadge';\nimport { useAppDispatch, useAppSelector } from '../../Hooks/useDispatch_Selector';\nimport { incrementBadge, decrementBadge, addDataBadge, removeDataBadge } from '../../Slices/BadgeSlice';\nimport { BadgeType, IClothesService } from '../../types/Types';\n\ninterface IProps {\n    on?: string;\n    off?: string;\n    type: BadgeType;\n    product: IClothesService;\n    sizeForCart?: string[];\n}\n\nconst MyButtons = memo(({ on, off, type, product, sizeForCart }: IProps) => {\n    const { isCheckId } = useBadge();\n    const dispatch = useAppDispatch();\n    const data = useAppSelector(state => state.BadgeSlice[type].data);\n\n    const badge = isCheckId(data, product);\n\n    const style = () => {\n        if (type === BadgeType.favorite) {\n            return !badge ? 'bttn__link bttnFavoritesOn' : 'bttn__link bttnFavoritesOff';\n        }\n        if (type === BadgeType.compare) {\n            return !badge ? 'bttn__link bttnCompareOff' : 'bttn__link bttnCompareOn';\n        }\n        if (type === BadgeType.cart) {\n            return !badge ? 'bttnCartOn' : 'bttnCartOff';\n        }\n        return ''; \n    };\n\n    return (\n        !badge ? (\n            <button\n                className={style()}\n                aria-label={type}\n                onClick={() => {\n                    dispatch(incrementBadge(type));\n                    dispatch(addDataBadge({ name: type, data: { ...product, size: sizeForCart } as IClothesService }));\n                }}\n            >\n                {on}\n            </button>\n        ) : (\n            <button\n                className={style()}\n                onClick={() => {\n                    dispatch(decrementBadge(type));\n                    dispatch(removeDataBadge({ name: type, data: product }));\n                }}\n            >\n                {off}\n            </button>\n        )\n    );\n});\n\nexport default MyButtons;\n","import { useCallback } from 'react';\nimport { IClothesService } from '../types/Types';\n\nexport const useBadge = () => {\n    const isCheckId = useCallback((data: IClothesService[], product: IClothesService) => {\n        return data.some(el => el.id === product.id);\n    }, []);\n\n    return { isCheckId };\n};\n","export const checkPrice = (price: number): string | number => {\n\n    let temp: number | string = Math.trunc(price);\n    \n    if( price < 1000) temp = Math.trunc(price);\n\n    if (price >= 1000) temp = Math.trunc(price).toString().slice(0,1) + ' '+  Math.trunc(price).toString().slice(1);\n    \n    if (price >= 10000) temp = Math.trunc(price).toString().slice(0,2) + ' '+  Math.trunc(price).toString().slice(2);\n    \n    return temp;\n}","import React, { useEffect, useState } from 'react';\nimport { ITotal } from '../Content';\nimport './Counter.scss';\n\ninterface IProps{\n    disabled: boolean,\n    activeSize: string,\n    setTotalInfo: React.Dispatch<React.SetStateAction<ITotal>> ,\n    totalInfo: ITotal\n}\n\nconst Counter = ({disabled, activeSize, setTotalInfo, totalInfo }:IProps) => {\n\n    const index = activeSize as keyof ITotal;\n        \n    const [count, setCount] = useState( totalInfo[index] );\n\n    \n    useEffect( () => {\n        setTotalInfo( {...totalInfo, [index]: count })\n    }, [count]);\n\n\n    useEffect( () => {\n        setCount(totalInfo[index]);\n    }, [activeSize]);\n    \n    const checkValue = (e: {target: HTMLInputElement}) => {\n\n        if( Number(e.target.value) <= 0 ) setCount(1);\n        \n        else if(Number(e.target.value) <= 30) setCount( Number(e.target.value)); \n        \n        else setCount(30);\n    }\n    \n    return (\n        <div className=\"counter\">\n            <button\n                disabled={disabled || count <= 1}\n                className=\"left\"\n                onClick={() => setCount(prev => prev > 1 ? prev-1 : prev = 1)}\n            >-</button>\n            <input\n                disabled={disabled} \n                type=\"number\" \n                value={ disabled ? 1 : Number(count).toString()}\n                onChange={e => checkValue(e)}\n            />\n            <button\n                disabled={disabled || count >= 30} \n                className=\"right\"\n                onClick={() => setCount(prev => prev < 30 ? prev+1 : prev = 30)}\n            >+</button>\n        </div>\n    );\n};\n\nexport default Counter;","import { useState } from 'react';\nimport './Dropdown.scss';\n\n\ninterface IProps {\n    size: string[] | undefined,\n    setDisabledCounter: React.Dispatch<React.SetStateAction<boolean>>,\n    setActiveSize: React.Dispatch<React.SetStateAction<string>>,\n    activeSize: string\n}\n\nconst Dropdown = ({size, setDisabledCounter, setActiveSize, activeSize}: IProps) => {\n    const [show, setShow] = useState(false);\n\n    return (\n        <div className=\"dropdown\">\n            <button\n                className={show ?\n                    \"dropdown-bttn active\" :\n                    \"dropdown-bttn\"}\n                onClick={() => setShow(!show)}\n            >\n                {activeSize ? activeSize: 'Size'}\n                {show ?\n                    <> &#8679;</>\n                    :\n                    <> &#8681;</>\n                }\n            </button>\n            {\n                show &&\n                <div className=\"dropdown-content\">\n                    {\n                        size?.map(size => (\n                            <button\n                                key={size} \n                                className=\"dropdown-content-bttn\"\n                                onClick={ () => {\n                                    setDisabledCounter(false);\n                                    setActiveSize(size);\n                                    setShow(!show)\n                                }}\n                            >\n                                {size}\n                            </button>\n                        ))\n                    }\n                </div>\n            }\n\n\n        </div>\n    );\n};\n\nexport default Dropdown;","import React, { useEffect, useState, useMemo } from 'react';\nimport { Link } from 'react-router-dom';\nimport MyButtons from '../../components/MyButtons/MyButtons';\nimport { checkPrice } from '../../Helpers/checkPrice';\nimport { BadgeType, ICarts } from '../../types/Types';\nimport Counter from './Counter/Counter';\nimport Dropdown from './Dropdown/Dropdown';\n\ninterface IProps {\n  product: ICarts;\n  totalPrice: { [x: string]: number };\n  setPrice: React.Dispatch<React.SetStateAction<{ [x: string]: number }>>;\n}\n\nexport interface ITotal {\n  S: number;\n  M: number;\n  L: number;\n  XL: number;\n  XXL: number;\n}\n\nconst Content = ({ product, setPrice, totalPrice }: IProps) => {\n  const { alt_description, id, urls, price, size } = product;\n\n  const [disabledCounter, setDisabledCounter] = useState(true);\n  const [totalInfo, setTotalInfo] = useState<ITotal>({ S: 0, M: 0, L: 0, XL: 0, XXL: 0 });\n  const [activeSize, setActiveSize] = useState('');\n\n  const setSize = () => {\n    const obj = {} as ITotal;\n    size?.forEach(s => {\n      obj[s as keyof ITotal] = 1;\n    });\n    setTotalInfo(obj);\n  };\n\n  const contentPrice = useMemo(() => {\n    const totalCount = Object.values(totalInfo).reduce((a, b) => a + b, 0);\n    return totalCount * (price ?? 0);\n  }, [totalInfo, price]);\n\n  useEffect(() => {\n    setSize();\n  }, []);\n\n  useEffect(() => {\n    setPrice(prev => ({ ...prev, [id]: contentPrice }));\n  }, [contentPrice, id, setPrice]);\n\n  const removeEL = (e: React.MouseEvent<HTMLDivElement, MouseEvent>, id: string) => {\n    const target = e.target as Element;\n    if (target.classList.contains('bttnCartOff')) {\n      const currentPrice = totalPrice[id] ?? 0;\n      setPrice(prev => ({ ...prev, [id]: contentPrice - currentPrice }));\n    }\n  };\n\n  return (\n    <div className=\"cart__product\">\n      <Link to={`/product/${id}`}>\n        <img className=\"img\" src={urls.regular} alt={alt_description} />\n      </Link>\n      <div className=\"information\">\n        <p>{alt_description}</p>\n        <p>{price} $/oс</p>\n      </div>\n      <div className=\"selectSize\">\n        <Dropdown\n          size={size}\n          setActiveSize={setActiveSize}\n          activeSize={activeSize}\n          setDisabledCounter={setDisabledCounter}\n        />\n        <Counter\n          disabled={disabledCounter}\n          activeSize={activeSize}\n          setTotalInfo={setTotalInfo}\n          totalInfo={totalInfo}\n        />\n      </div>\n      <div className=\"totalPrice\">\n        <span>{checkPrice(contentPrice)} $</span>\n      </div>\n      <div className=\"additionalOptions\" onClick={e => removeEL(e, id)}>\n        <MyButtons type={BadgeType.favorite} product={product} />\n        <MyButtons type={BadgeType.cart} product={product} />\n      </div>\n    </div>\n  );\n};\n\nexport default Content;\n","import { useState } from 'react';\nimport { checkPrice } from \"../../../Helpers/checkPrice\";\n\nimport './PriceSection.scss';\n\ninterface IProps {\n    totalPrice: { [x: string]: number; }\n}\n\n\nconst PriceSection = ({ totalPrice }: IProps) => {\n    const [inputGift, setInputGift] = useState('');\n\n    \n    const GIFT = 'gift';\n    \n    const summary = Object.values(totalPrice).reduce((a, b) => a + b, 0);\n    const isDiscount = inputGift === GIFT;\n    const discount = isDiscount ? summary * 0.9 : summary;\n    \n        \n    return (\n        <div className=\"priceWrap\">\n            <div className=\"priceWrap__section\">\n                <h4>Summary</h4>\n            </div>\n            <div className=\"priceWrap__gift\">\n                Gift code:\n                <input\n                    placeholder=\"gift\"\n                    type=\"text\"\n                    value={inputGift}\n                    onChange={ e => setInputGift(e.target.value)}\n                />\n            </div>\n            <div className=\"priceWrap__grid\">\n                Discount:\n                <p className=\"discount\">{isDiscount ? '10%' : '0%'}</p>\n                Total:\n                <p>\n                    <span className={isDiscount ? 'line smallSize' : 'bigSize'}>\n                        {checkPrice(summary)} $\n                    </span>\n                    {isDiscount && \n                        <span className='bigSize'>\n                            {checkPrice(discount)} $\n                        </span>}\n                </p>\n            </div>\n            <button className=\"priceWrap__bttn\">\n                Buy now\n            </button>\n        </div>\n    );\n};\n\nexport default PriceSection;","import { useAppSelector } from \"../../Hooks/useDispatch_Selector\";\nimport { Helmet } from \"react-helmet\";\nimport Breadcrumbs from \"../../components/Breadcrumbs/Breadcrumbs\";\nimport Content from \"./Content\";\nimport { useState } from \"react\";\nimport PriceSection from \"./PriceSection/PriceSection\";\nimport './CartPage.scss';\n\n\n\nconst CartPage = () => {\n    const data = useAppSelector(state => state.BadgeSlice.cart.data);\n    const [totalPrice, setTotalPrice] = useState<{ [x: string]: number }>({});\n    console.log('render price Section');\n    \n    return (\n        <>\n            <Helmet>\n                <title>Cart products</title>\n            </Helmet>\n\n            <Breadcrumbs />\n\n            <h2 className=\"pageName\">Cart</h2>\n\n            {data.length ?\n\n                <div className=\"carts\">\n\n                    <div className=\"cart\">\n                        {\n                            data.map(product => (\n                                <Content key={product.id} product={product} totalPrice={totalPrice} setPrice={setTotalPrice} />\n                            ))\n                        }\n                    </div>\n                    {/* Total Price  */}\n                    <PriceSection totalPrice={totalPrice} />\n                </div>\n                :\n                // if cart is empty\n                <h3 className=\"pageEmpty\">Cart list is empty</h3>\n            }\n        </>\n    );\n};\n\nexport default CartPage;"],"names":["Breadcrumbs","pathname","useLocation","navigate","useNavigate","console","log","_jsxs","className","children","_jsx","Link","to","onClick","_Fragment","memo","_ref","on","off","type","product","sizeForCart","isCheckId","useCallback","data","some","el","id","dispatch","useAppDispatch","badge","useAppSelector","state","BadgeSlice","style","BadgeType","favorite","compare","cart","decrementBadge","removeDataBadge","name","incrementBadge","addDataBadge","_objectSpread","size","checkPrice","price","temp","Math","trunc","toString","slice","disabled","activeSize","setTotalInfo","totalInfo","index","count","setCount","useState","useEffect","prev","value","Number","onChange","e","target","checkValue","setDisabledCounter","setActiveSize","show","setShow","map","setPrice","totalPrice","alt_description","urls","disabledCounter","S","M","L","XL","XXL","contentPrice","useMemo","Object","values","reduce","a","b","setSize","obj","forEach","s","concat","src","regular","alt","Dropdown","Counter","removeEL","classList","contains","_totalPrice$id","currentPrice","MyButtons","inputGift","setInputGift","summary","isDiscount","discount","placeholder","CartPage","setTotalPrice","Helmet","length","Content","PriceSection"],"sourceRoot":""}