{"version":3,"file":"static/js/264.36bbf0f2.chunk.js","mappings":"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","sources":["components/Breadcrumbs/Breadcrumbs.tsx","components/MyButtons/MyButtons.tsx","Hooks/useBadge.ts","pages/FavoritesPage/FavoritesPage.tsx"],"sourcesContent":["import { Link, useLocation, useNavigate } from 'react-router-dom';\nimport './Breadcrumbs.scss';\n\n\nconst Breadcrumbs = () => {\n    const {pathname} = useLocation();\n    const navigate = useNavigate();\n    console.log('Breadcrumbs rendered');\n    return (\n        <div className='bread'>\n            <Link to={'/'}>Home</Link>\n            /\n            <button onClick={() => navigate(-1)}>\n                Back\n            </button>\n            {\n            pathname !== '/filter' &&\n            <>\n                /\n                <Link to={'/filter'}>\n                    Filter\n                </Link>\n            </>\n            }\n        </div>\n    );\n};\n\nexport default Breadcrumbs;","import { memo } from 'react';\nimport { useBadge } from '../../Hooks/useBadge';\nimport { useAppDispatch, useAppSelector } from '../../Hooks/useDispatch_Selector';\nimport { incrementBadge, decrementBadge, addDataBadge, removeDataBadge } from '../../Slices/BadgeSlice';\nimport { BadgeType, IClothesService } from '../../types/Types';\n\ninterface IProps {\n    on?: string;\n    off?: string;\n    type: BadgeType;\n    product: IClothesService;\n    sizeForCart?: string[];\n}\n\nconst MyButtons = memo(({ on, off, type, product, sizeForCart }: IProps) => {\n    const { isCheckId } = useBadge();\n    const dispatch = useAppDispatch();\n    const data = useAppSelector(state => state.BadgeSlice[type].data);\n\n    const badge = isCheckId(data, product);\n\n    const style = () => {\n        if (type === BadgeType.favorite) {\n            return !badge ? 'bttn__link bttnFavoritesOn' : 'bttn__link bttnFavoritesOff';\n        }\n        if (type === BadgeType.compare) {\n            return !badge ? 'bttn__link bttnCompareOff' : 'bttn__link bttnCompareOn';\n        }\n        if (type === BadgeType.cart) {\n            return !badge ? 'bttnCartOn' : 'bttnCartOff';\n        }\n        return ''; \n    };\n\n    return (\n        !badge ? (\n            <button\n                className={style()}\n                aria-label={type}\n                onClick={() => {\n                    dispatch(incrementBadge(type));\n                    dispatch(addDataBadge({ name: type, data: { ...product, size: sizeForCart } as IClothesService }));\n                }}\n            >\n                {on}\n            </button>\n        ) : (\n            <button\n                className={style()}\n                onClick={() => {\n                    dispatch(decrementBadge(type));\n                    dispatch(removeDataBadge({ name: type, data: product }));\n                }}\n            >\n                {off}\n            </button>\n        )\n    );\n});\n\nexport default MyButtons;\n","import { useCallback } from 'react';\nimport { IClothesService } from '../types/Types';\n\nexport const useBadge = () => {\n    const isCheckId = useCallback((data: IClothesService[], product: IClothesService) => {\n        return data.some(el => el.id === product.id);\n    }, []);\n\n    return { isCheckId };\n};\n","import { Link } from 'react-router-dom';\nimport { useAppSelector } from '../../Hooks/useDispatch_Selector';\nimport { BadgeType } from '../../types/Types';\nimport MyButtons from '../../components/MyButtons/MyButtons';\nimport { Helmet } from \"react-helmet\";\nimport './FavoritesPage.scss';\nimport Breadcrumbs from '../../components/Breadcrumbs/Breadcrumbs';\nimport { memo } from 'react';\n\nconst FavoritesPage = memo( () => {\n    const favorites  = useAppSelector(state => state.BadgeSlice.favorites);\n    \n    return (\n        <>\n            <Helmet>\n                <title>Your Favorites</title>\n            \n            </Helmet>\n            \n            <Breadcrumbs />\n            \n            <h2 className='pageName'>Favorites</h2>\n            \n            {favorites.data.length ?\n                <div className='favorites'>\n\n\n                    {favorites.data.map(el => (\n                        <div key={el.id} className='favorites__content'>\n                            <MyButtons\n                                type={BadgeType.favorite}\n                                product={el}\n                            />\n                            <Link to={`/product/${el.id}`}>\n                                <img className='favorites__content-img' src={el.urls.regular} alt={el.alt_description} />\n                            </Link>\n\n                            <div className='favorites__content-title'>\n                                <p>{el.alt_description}</p>\n                                <div className='favorites__content-title-buy'>\n                                    <span className='favorites__content-title-buy-price'>{el.price} $</span>\n                                    <Link to={`/product/${el.id}`} />\n                                </div>\n                            </div>\n                        </div>\n                    ))}\n                </div>\n                :\n                <h3 className='pageEmpty'>Favorites list is empty</h3>\n            }\n        </>\n    );\n});\n\nexport default FavoritesPage;"],"names":["Breadcrumbs","pathname","useLocation","navigate","useNavigate","console","log","_jsxs","className","children","_jsx","Link","to","onClick","_Fragment","memo","_ref","on","off","type","product","sizeForCart","isCheckId","useCallback","data","some","el","id","dispatch","useAppDispatch","badge","useAppSelector","state","BadgeSlice","style","BadgeType","favorite","compare","cart","decrementBadge","removeDataBadge","name","incrementBadge","addDataBadge","_objectSpread","size","favorites","Helmet","length","map","MyButtons","concat","src","urls","regular","alt","alt_description","price"],"sourceRoot":""}