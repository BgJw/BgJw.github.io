{"version":3,"file":"static/js/552.c46b6d6a.chunk.js","mappings":"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","sources":["components/Breadcrumbs/Breadcrumbs.tsx","components/MyButtons/MyButtons.tsx","Hooks/useBadge.ts","pages/FilterPage/MyInput.tsx","pages/FilterPage/FilterOptions.tsx","pages/FilterPage/FilterPage.tsx","components/Products/Products.tsx"],"sourcesContent":["import { Link, useLocation, useNavigate } from 'react-router-dom';\nimport './Breadcrumbs.scss';\n\n\nconst Breadcrumbs = () => {\n    const {pathname} = useLocation();\n    const navigate = useNavigate();\n    \n    return (\n        <div className='bread'>\n            <Link to={'/'}>Home</Link>\n            /\n            <button onClick={() => navigate(-1)}>\n                Back\n            </button>\n            {\n            pathname !== '/filter' &&\n            <>\n                /\n                <Link to={'/filter'}>\n                    Filter\n                </Link>\n            </>\n            }\n        </div>\n    );\n};\n\nexport default Breadcrumbs;","import { memo } from 'react';\nimport { useBadge } from '../../Hooks/useBadge';\nimport { useAppDispatch, useAppSelector } from '../../Hooks/useDispatch_Selector';\nimport { incrementBadge, decrementBadge, addDataBadge, removeDataBadge } from '../../Slices/BadgeSlice';\nimport { BadgeType, IClothesService } from '../../types/Types';\n\ninterface IProps {\n    on?: string;\n    off?: string;\n    type: BadgeType;\n    product: IClothesService;\n    sizeForCart?: string[];\n}\n\nconst MyButtons = memo(({ on, off, type, product, sizeForCart }: IProps) => {\n    const { isCheckId } = useBadge();\n    const dispatch = useAppDispatch();\n    const data = useAppSelector(state => state.BadgeSlice[type].data);\n\n    const badge = isCheckId(data, product);\n\n    const style = () => {\n        if (type === BadgeType.favorite) {\n            return !badge ? 'bttn__link bttnFavoritesOn' : 'bttn__link bttnFavoritesOff';\n        }\n        if (type === BadgeType.compare) {\n            return !badge ? 'bttn__link bttnCompareOff' : 'bttn__link bttnCompareOn';\n        }\n        if (type === BadgeType.cart) {\n            return !badge ? 'bttnCartOn' : 'bttnCartOff';\n        }\n        return ''; \n    };\n\n    return (\n        !badge ? (\n            <button\n                className={style()}\n                aria-label={type}\n                onClick={() => {\n                    dispatch(incrementBadge(type));\n                    dispatch(addDataBadge({ name: type, data: { ...product, size: sizeForCart } as IClothesService }));\n                }}\n            >\n                {on}\n            </button>\n        ) : (\n            <button\n                className={style()}\n                onClick={() => {\n                    dispatch(decrementBadge(type));\n                    dispatch(removeDataBadge({ name: type, data: product }));\n                }}\n            >\n                {off}\n            </button>\n        )\n    );\n});\n\nexport default MyButtons;\n","import { useCallback } from 'react';\nimport { IClothesService } from '../types/Types';\n\nexport const useBadge = () => {\n    const isCheckId = useCallback((data: IClothesService[], product: IClothesService) => {\n        return data.some(el => el.id === product.id);\n    }, []);\n\n    return { isCheckId };\n};\n","import { memo } from \"react\";\nimport { IFilter } from \"./FilterPage\";\n\ninterface IProps {\n    name: string,\n    data: string[],\n    filterOption: IFilter,\n    setFilter: (value: React.SetStateAction<IFilter>) => void\n};\n\nconst MyInput = memo(({ name, data, filterOption, setFilter }: IProps) => {\n\n    type key = keyof typeof filterOption;\n\n    const isCheck = (e: { target: HTMLInputElement }, name: string) => {\n\n        let filterName = filterOption[name as key] as string[];\n        \n        !e.target.checked ?\n            filterName = filterName.filter(size => size !== e.target.name)\n            :\n            filterName.push(e.target.name);\n\n            setFilter({\n            ...filterOption,\n            [name]: filterName\n        });}\n\n\n    return (\n            <div className='input'>\n                <span>\n                    {name}:\n                </span>\n                {data.map((el) => (\n                    <label\n                        key={el}\n                        className='input__label'>\n                            {el}\n                        <input\n                            type=\"checkbox\"\n                            checked={ filterOption[name as key].includes(el)}\n                            className='input__checkbox'\n                            name={el}\n                            onChange={(e) => { isCheck(e, name) }}\n                        />\n                        <span className=\"checkmark\" />\n                    </label>\n                ))}\n\n            </div>\n    );\n});\n\nexport default MyInput;\n\n\n\n","import React, { memo, useEffect, useState } from 'react';\nimport { country, materials, sizes } from '../../services/ClothesService';\nimport MyInput from './MyInput';\nimport { IFilter } from './FilterPage';\n\ninterface IProps {\n    setFilterOptions: React.Dispatch<React.SetStateAction<IFilter>>,\n    filterOptions: IFilter\n}\nconst FilterOptions = memo(({ filterOptions, setFilterOptions }: IProps) => {\n\n\n\n    // open filter options\n    const [isOpenFilter, setIsOpenFilter] = useState(false);\n    const [popUp, setPopUp] = useState(true);\n\n\n    const clearAll = () => {\n        setFilterOptions({\n            text: '',\n            price: '150',\n            size: [],\n            country: [],\n            material: [],\n        });\n\n    }\n    useEffect(() => {\n\n        setTimeout(() => {\n            setPopUp(false);\n        }, 10000);\n    }, [])\n\n    return (\n        <>\n            <div className={`filter__position ${isOpenFilter ? 'active' : ''}`}>\n                <h2>How to filter things?</h2>\n                {/* search for filter products */}\n                <div className='filter__position__search'>\n                    <div className='bttnOptions'>\n                        {\n                            popUp && <div className='helpers'>More options &#8681;</div>\n                        }\n                        <button onClick={() => { setIsOpenFilter(prev => !prev); setPopUp(false) }} />\n                    </div>\n                    <input\n                        value={filterOptions.text}\n                        type=\"text\"\n                        placeholder='Search'\n                        className='filter__position__search-input'\n                        onChange={(e) => { setFilterOptions({ ...filterOptions, text: e.target.value }) }}\n                    />\n                    <button\n                        className='filter__position__search-bttn'\n                    />\n                </div>\n            </div>\n            <div className={`filter__options ${isOpenFilter && 'active'}`}>\n                <div className='price'>\n                    <span>\n                        Price:\n                    </span>\n                    <input\n                        type=\"range\"\n                        min={35}\n                        max={150}\n                        value={filterOptions.price}\n                        onChange={(e) => { setFilterOptions({ ...filterOptions, price: e.target.value }) }}\n                    />\n                    <div>\n                        Up to:\n                        <input\n                            type=\"number\"\n                            value={filterOptions.price}\n                            onChange={(e) => setFilterOptions({ ...filterOptions, price: e.target.value })}\n                        />\n                    </div>\n                    <button\n                        className='bttnClearAll'\n                        onClick={clearAll}>\n                        Clear all\n                    </button>\n                </div>\n                {/* size  */}\n                <MyInput\n                    data={sizes}\n                    name='size'\n                    filterOption={filterOptions}\n                    setFilter={setFilterOptions}\n                />\n\n                {/* country */}\n                <MyInput\n                    data={country}\n                    name='country'\n                    filterOption={filterOptions}\n                    setFilter={setFilterOptions}\n                />\n                {/* material */}\n                <MyInput\n                    data={materials}\n                    name='material'\n                    filterOption={filterOptions}\n                    setFilter={setFilterOptions}\n                />\n            </div>\n        </>\n    );\n});\n\nexport default FilterOptions;","import { useEffect, useState } from 'react';\nimport { useAppSelector } from '../../Hooks/useDispatch_Selector';\nimport { IClothesService } from '../../types/Types';\nimport Breadcrumbs from '../../components/Breadcrumbs/Breadcrumbs';\nimport Products from '../../components/Products/Products';\nimport { Helmet } from \"react-helmet\";\nimport FilterOptions from './FilterOptions';\nimport './FilterPage.scss';\n\nexport interface IFilter {\n    text: string;\n    price: string;\n    country: string[];\n    material: string[];\n    size: string[];\n}\n\nconst FilterPage = () => {\n    const { productsMan, productsWoman } = useAppSelector(state => state.ProductSlice);\n\n    const [copyData, setCopyData] = useState<IClothesService[]>([]);\n    const [filterOptions, setFilterOptions] = useState<IFilter>({\n        text: '',\n        price: '150',\n        country: [],\n        material: [],\n        size: []\n    });\n\n    const isAvailabilityOptions = (\n        data: IClothesService[],\n        filter: string[],\n        option: keyof IClothesService\n    ) => {\n        return data.filter(item => {\n            const field = item[option];\n\n            if (Array.isArray(field)) {\n                // Проверяем пересечение массивов\n                return field.some(val => filter.includes(String(val)));\n            } else if (typeof field === 'string' || typeof field === 'number') {\n                return filter.includes(String(field));\n            }\n            return false;\n        });\n    };\n\n    const filterClothers = (data: IClothesService[]) => {\n        const textLower = filterOptions.text.trim().toLowerCase();\n\n        let filtered = data.filter(el => {\n            // Фильтрация по тексту (alt_description)\n            if (textLower && !el.alt_description.toLowerCase().includes(textLower)) {\n                return false;\n            }\n            // Фильтрация по цене\n            if (filterOptions.price && Number(el.price) > Number(filterOptions.price)) {\n                return false;\n            }\n            return true;\n        });\n\n        if (filterOptions.size.length > 0) {\n            filtered = isAvailabilityOptions(filtered, filterOptions.size, 'sizes');\n        }\n        if (filterOptions.country.length > 0) {\n            filtered = isAvailabilityOptions(filtered, filterOptions.country, 'country');\n        }\n        if (filterOptions.material.length > 0) {\n            filtered = isAvailabilityOptions(filtered, filterOptions.material, 'material');\n        }\n\n        setCopyData(filtered);\n    };\n\n    useEffect(() => {\n        filterClothers([...productsMan, ...productsWoman]);\n    }, [filterOptions, productsMan, productsWoman]);\n\n    return (\n        <div className='filter'>\n            <Helmet>\n                <title>Search - Find the best for you</title>\n            </Helmet>\n\n            <Breadcrumbs />\n\n            <FilterOptions \n                filterOptions={filterOptions} \n                setFilterOptions={setFilterOptions} \n            />\n            <hr />\n            <div className='filter__filteredProducts'>\n                {copyData.map((product, i) => (\n                    <Products key={product.id} product={product} i={i} />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default FilterPage;\n","import { Link } from 'react-router-dom';\nimport './Products.scss';\nimport MyButtons from '../MyButtons/MyButtons';\nimport { BadgeType, IClothesService } from '../../types/Types';\n\ninterface IProduct {\n    product: IClothesService,\n    i: number\n}\n\nconst Products = ({ product, i }: IProduct) => {\n\n    return (\n        <div className='product'>\n            <div className='product__img'>\n                <MyButtons\n                    type={BadgeType.favorite}\n                    product={product}\n                />\n                <Link to={`/product/${product.id}`} aria-label={`View details of ${product.alt_description}`}>\n                    <img\n                        className='product__img-photo lazy'\n                        src={product.urls.thumb}\n                        srcSet={`\n                            ${product.urls.thumb} 600w,\n                            ${product.urls.small} 900w,\n                        `}\n                        sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\"\n                        alt={product.alt_description}\n                        width={200}\n                        height={300}\n                        loading={ i < 6 ? 'eager' : 'lazy'}\n                    />\n                </Link>\n            </div>\n\n            <div className='product__preview'>\n                <div className='product__preview-title'>{product.alt_description}</div>\n                <div className='product__preview-buy'>\n                    <p>{product.price} $</p>\n                    <Link to={`/product/${product.id}`} aria-label='add to cart' />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Products;\n"],"names":["Breadcrumbs","pathname","useLocation","navigate","useNavigate","_jsxs","className","children","_jsx","Link","to","onClick","_Fragment","memo","_ref","on","off","type","product","sizeForCart","isCheckId","useCallback","data","some","el","id","dispatch","useAppDispatch","badge","useAppSelector","state","BadgeSlice","style","BadgeType","favorite","compare","cart","decrementBadge","removeDataBadge","name","incrementBadge","addDataBadge","_objectSpread","size","filterOption","setFilter","map","checked","includes","onChange","e","isCheck","filterName","target","push","filter","filterOptions","setFilterOptions","isOpenFilter","setIsOpenFilter","useState","popUp","setPopUp","useEffect","setTimeout","concat","prev","value","text","placeholder","min","max","price","clearAll","country","material","MyInput","sizes","materials","FilterPage","productsMan","productsWoman","ProductSlice","copyData","setCopyData","isAvailabilityOptions","option","item","field","Array","isArray","val","String","textLower","trim","toLowerCase","filtered","alt_description","Number","length","filterClothers","Helmet","FilterOptions","i","Products","MyButtons","src","urls","thumb","srcSet","small","alt","width","height","loading"],"sourceRoot":""}